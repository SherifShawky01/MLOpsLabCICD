# ────────────────────────────────────────────────────────
#  CI + CD: Test  →  Build  →  Push to Docker Hub  →  Deploy to Cloud Run
# ────────────────────────────────────────────────────────
name: CI-CD | Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# ────────────────────────────────────────────────────────
# Global environment
# ────────────────────────────────────────────────────────
env:
  # Docker image name in Docker Hub (username is injected from secrets)
  DOCKERHUB_REPO:  ${{ secrets.DOCKERHUB_USERNAME }}/churn-prediction

  # Cloud Run defaults (can be overridden with repo variables)
  CLOUDRUN_SERVICE: ${{ vars.CLOUDRUN_SERVICE || 'churn-prediction-api' }}
  CLOUDRUN_REGION:  ${{ vars.CLOUDRUN_REGION  || 'us-central1' }}

  # Toggle: 'true'  ➜ build + push only
  #         'false' ➜ full deploy to Cloud Run
  DRY_RUN:          ${{ vars.DRY_RUN || 'true' }}

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write            # needed for google-github-actions/auth

    steps:
    # ────────────────────────────────
    # 1. Check out repository
    # ────────────────────────────────
    - uses: actions/checkout@v4

    # ────────────────────────────────
    # 2. Python setup + dependencies
    # ────────────────────────────────
    - uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    - name: Install deps & run tests
      run: |
        python -m pip install --quiet --upgrade pip
        pip install -q -r requirements.txt
        # Uncomment the next line when you add tests
        # python -m pytest tests/

    # ────────────────────────────────
    # 3. Login to Docker Hub
    # ────────────────────────────────
    - name: Docker Hub – login
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" \
          | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    # ────────────────────────────────
    # 4. Build & push image
    # ────────────────────────────────
    - name: Build & push image
      env:
        TAG: ${{ github.sha }}
      run: |
        docker build -t $DOCKERHUB_REPO:$TAG ./app
        docker push $DOCKERHUB_REPO:$TAG
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

    # ────────────────────────────────
    # 5. Authenticate to Google Cloud  (skipped if DRY_RUN)
    # ────────────────────────────────
    - name: GCP auth
      if: env.DRY_RUN == 'false'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # ────────────────────────────────
    # 6. Deploy to Cloud Run (skipped if DRY_RUN)
    # ────────────────────────────────
    - name: Deploy to Cloud Run
      if: env.DRY_RUN == 'false'
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.CLOUDRUN_SERVICE }}
        region:  ${{ env.CLOUDRUN_REGION }}
        image:   docker.io/${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}

    # ────────────────────────────────
    # 7. Smoke-test the new service (skipped if DRY_RUN)
    # ────────────────────────────────
    - name: Curl /health endpoint
      if: env.DRY_RUN == 'false'
      run: |
        URL="${{ steps.deploy.outputs.url }}/health"
        echo "Waiting for $URL"
        for i in {1..10}; do
          if curl -fsSL "$URL"; then
            echo "✅ API is responding"; exit 0
          fi
          sleep 5
        done
        echo "❌ Service did not respond in time" && exit 1
