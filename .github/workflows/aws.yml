name: CI-CD | Test → Build → Push → Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# ──────────────────────────────
# Global variables & toggles
# ──────────────────────────────
env:
  IMAGE_NAME: churn-prediction
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/churn-prediction
  CLOUDRUN_SERVICE: churn-prediction-api          # Change if you like
  CLOUDRUN_REGION: us-central1                    # or europe-west1, asia-southeast1 …
  DRY_RUN: ${{ vars.DRY_RUN || 'true' }}          # leave “true” for CI-only runs

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write           # needed for google-github-actions/auth

    steps:
    # 1  Checkout
    - uses: actions/checkout@v4

    # 2  Python + deps + (optional) tests
    - uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    - name: Install dependencies & run tests
      run: |
        python -m pip install -q --upgrade pip
        pip install -q -r requirements.txt
        # Uncomment when you actually have tests:
        # python -m pytest tests/

    # 3  Login to Docker Hub
    - name: Docker Hub – login
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" \
        | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    # 4  Build & push image
    - name: Build & push image
      env:
        TAG: ${{ github.sha }}
      run: |
        docker build -t $DOCKERHUB_REPO:$TAG ./app
        docker push $DOCKERHUB_REPO:$TAG
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

    # 5  Authenticate to Google Cloud  (skipped when DRY_RUN == true)
    - name: GCP auth
      if: env.DRY_RUN == 'false'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    # 6  Deploy to Cloud Run (skipped when DRY_RUN == true)
    - name: Deploy to Cloud Run
      if: env.DRY_RUN == 'false'
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2  # :contentReference[oaicite:0]{index=0}
      with:
        service: ${{ env.CLOUDRUN_SERVICE }}
        region:  ${{ env.CLOUDRUN_REGION }}
        image:   docker.io/${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}

    # 7  Smoke-test the fresh deployment (skipped when DRY_RUN == true)
    - name: Curl health endpoint
      if: env.DRY_RUN == 'false'
      run: |
        echo "Waiting for service URL: ${{ steps.deploy.outputs.url }}"
        for i in {1..10}; do
          if curl -fsSL "${{ steps.deploy.outputs.url }}/health"; then
            echo "✅ API is responding"; exit 0
          fi
          sleep 5
        done
        echo "❌ Service did not respond in time" && exit 1
